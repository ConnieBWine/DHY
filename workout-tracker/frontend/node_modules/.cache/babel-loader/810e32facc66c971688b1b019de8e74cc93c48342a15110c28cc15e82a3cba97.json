{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Documents\\\\DHY_V5\\\\workout-tracker\\\\frontend\\\\src\\\\context\\\\WorkoutContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create the workout context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WorkoutContext = /*#__PURE__*/createContext();\nexport const WorkoutProvider = ({\n  children\n}) => {\n  _s();\n  // State for user profile and workout plans\n  const [userProfile, setUserProfile] = useState(null);\n  const [workoutPlan, setWorkoutPlan] = useState(null);\n  const [activeExercise, setActiveExercise] = useState(null);\n  const [exerciseList, setExerciseList] = useState([]);\n  const [sessionStats, setSessionStats] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch available exercises on initial load\n  useEffect(() => {\n    const fetchExercises = async () => {\n      try {\n        const response = await axios.get('/api/exercises');\n        setExerciseList(response.data.exercises);\n      } catch (err) {\n        console.error('Error fetching exercises:', err);\n        // Fallback to hardcoded list if API fails\n        setExerciseList([{\n          name: 'Squat',\n          type: 'reps'\n        }, {\n          name: 'Bicep Curl',\n          type: 'reps'\n        }, {\n          name: 'Pushup',\n          type: 'reps'\n        }, {\n          name: 'Lunge',\n          type: 'reps'\n        }, {\n          name: 'Shoulder Press',\n          type: 'reps'\n        }, {\n          name: 'Plank',\n          type: 'timed'\n        }, {\n          name: 'Jumping Jack',\n          type: 'timed'\n        }]);\n      }\n    };\n    fetchExercises();\n  }, []);\n\n  // Function to generate a workout plan based on survey data\n  const generateWorkoutPlan = async surveyData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post('/api/workout-plan', surveyData);\n      setWorkoutPlan(response.data);\n      return response.data;\n    } catch (err) {\n      console.error('Error generating workout plan:', err);\n      setError('Failed to generate workout plan. Please try again.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to generate a workout plan with a custom prompt\n  const generateCustomWorkoutPlan = async prompt => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post('/api/workout-prompt', {\n        prompt\n      });\n      setWorkoutPlan(response.data.workout_plan);\n      return response.data;\n    } catch (err) {\n      console.error('Error with custom workout prompt:', err);\n      setError('Failed to process your prompt. Please try again.');\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to start tracking an exercise\n  const startExercise = async (exercise, targetReps = 0, targetSets = 1, targetDuration = 0) => {\n    setLoading(true);\n    setError(null);\n    try {\n      var _exerciseList$find;\n      const exerciseData = {\n        exercise,\n        target_reps: targetReps,\n        target_sets: targetSets,\n        target_duration: targetDuration\n      };\n      await axios.post('/api/start-exercise', exerciseData);\n      setActiveExercise({\n        name: exercise,\n        targetReps,\n        targetSets,\n        targetDuration,\n        currentReps: 0,\n        currentSet: 1,\n        isTimed: ((_exerciseList$find = exerciseList.find(e => e.name.toLowerCase() === exercise.toLowerCase())) === null || _exerciseList$find === void 0 ? void 0 : _exerciseList$find.type) === 'timed'\n      });\n      return true;\n    } catch (err) {\n      console.error('Error starting exercise:', err);\n      setError('Failed to start exercise tracking. Please try again.');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Function to update session stats\n  const updateSessionStats = stats => {\n    setSessionStats(prevStats => ({\n      ...prevStats,\n      ...stats\n    }));\n  };\n\n  // Clear current workout data\n  const clearWorkout = () => {\n    setActiveExercise(null);\n  };\n\n  // Provide the context values\n  const contextValue = {\n    userProfile,\n    setUserProfile,\n    workoutPlan,\n    setWorkoutPlan,\n    activeExercise,\n    setActiveExercise,\n    exerciseList,\n    sessionStats,\n    loading,\n    error,\n    generateWorkoutPlan,\n    generateCustomWorkoutPlan,\n    startExercise,\n    updateSessionStats,\n    clearWorkout\n  };\n  return /*#__PURE__*/_jsxDEV(WorkoutContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkoutProvider, \"i6EuUy59TMj60QTJMRY4ev42ZnQ=\");\n_c = WorkoutProvider;\nvar _c;\n$RefreshReg$(_c, \"WorkoutProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsxDEV","_jsxDEV","WorkoutContext","WorkoutProvider","children","_s","userProfile","setUserProfile","workoutPlan","setWorkoutPlan","activeExercise","setActiveExercise","exerciseList","setExerciseList","sessionStats","setSessionStats","loading","setLoading","error","setError","fetchExercises","response","get","data","exercises","err","console","name","type","generateWorkoutPlan","surveyData","post","generateCustomWorkoutPlan","prompt","workout_plan","startExercise","exercise","targetReps","targetSets","targetDuration","_exerciseList$find","exerciseData","target_reps","target_sets","target_duration","currentReps","currentSet","isTimed","find","e","toLowerCase","updateSessionStats","stats","prevStats","clearWorkout","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/Documents/DHY_V5/workout-tracker/frontend/src/context/WorkoutContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Create the workout context\r\nexport const WorkoutContext = createContext();\r\n\r\nexport const WorkoutProvider = ({ children }) => {\r\n  // State for user profile and workout plans\r\n  const [userProfile, setUserProfile] = useState(null);\r\n  const [workoutPlan, setWorkoutPlan] = useState(null);\r\n  const [activeExercise, setActiveExercise] = useState(null);\r\n  const [exerciseList, setExerciseList] = useState([]);\r\n  const [sessionStats, setSessionStats] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch available exercises on initial load\r\n  useEffect(() => {\r\n    const fetchExercises = async () => {\r\n      try {\r\n        const response = await axios.get('/api/exercises');\r\n        setExerciseList(response.data.exercises);\r\n      } catch (err) {\r\n        console.error('Error fetching exercises:', err);\r\n        // Fallback to hardcoded list if API fails\r\n        setExerciseList([\r\n          { name: 'Squat', type: 'reps' },\r\n          { name: 'Bicep Curl', type: 'reps' },\r\n          { name: 'Pushup', type: 'reps' },\r\n          { name: 'Lunge', type: 'reps' },\r\n          { name: 'Shoulder Press', type: 'reps' },\r\n          { name: 'Plank', type: 'timed' },\r\n          { name: 'Jumping Jack', type: 'timed' }\r\n        ]);\r\n      }\r\n    };\r\n\r\n    fetchExercises();\r\n  }, []);\r\n\r\n  // Function to generate a workout plan based on survey data\r\n  const generateWorkoutPlan = async (surveyData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post('/api/workout-plan', surveyData);\r\n      setWorkoutPlan(response.data);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error generating workout plan:', err);\r\n      setError('Failed to generate workout plan. Please try again.');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to generate a workout plan with a custom prompt\r\n  const generateCustomWorkoutPlan = async (prompt) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post('/api/workout-prompt', { prompt });\r\n      setWorkoutPlan(response.data.workout_plan);\r\n      return response.data;\r\n    } catch (err) {\r\n      console.error('Error with custom workout prompt:', err);\r\n      setError('Failed to process your prompt. Please try again.');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to start tracking an exercise\r\n  const startExercise = async (exercise, targetReps = 0, targetSets = 1, targetDuration = 0) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const exerciseData = {\r\n        exercise,\r\n        target_reps: targetReps,\r\n        target_sets: targetSets,\r\n        target_duration: targetDuration\r\n      };\r\n      \r\n      await axios.post('/api/start-exercise', exerciseData);\r\n      \r\n      setActiveExercise({\r\n        name: exercise,\r\n        targetReps,\r\n        targetSets,\r\n        targetDuration,\r\n        currentReps: 0,\r\n        currentSet: 1,\r\n        isTimed: exerciseList.find(e => e.name.toLowerCase() === exercise.toLowerCase())?.type === 'timed'\r\n      });\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error starting exercise:', err);\r\n      setError('Failed to start exercise tracking. Please try again.');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Function to update session stats\r\n  const updateSessionStats = (stats) => {\r\n    setSessionStats(prevStats => ({\r\n      ...prevStats,\r\n      ...stats\r\n    }));\r\n  };\r\n\r\n  // Clear current workout data\r\n  const clearWorkout = () => {\r\n    setActiveExercise(null);\r\n  };\r\n\r\n  // Provide the context values\r\n  const contextValue = {\r\n    userProfile,\r\n    setUserProfile,\r\n    workoutPlan,\r\n    setWorkoutPlan,\r\n    activeExercise,\r\n    setActiveExercise,\r\n    exerciseList,\r\n    sessionStats,\r\n    loading,\r\n    error,\r\n    generateWorkoutPlan,\r\n    generateCustomWorkoutPlan,\r\n    startExercise,\r\n    updateSessionStats,\r\n    clearWorkout\r\n  };\r\n\r\n  return (\r\n    <WorkoutContext.Provider value={contextValue}>\r\n      {children}\r\n    </WorkoutContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}